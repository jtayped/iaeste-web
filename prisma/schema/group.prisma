model Group {
    id String @id @default(cuid())

    name        String  @unique
    description String?

    isPrivate Boolean @default(false)

    participants User[]
    invitesSent  GroupInvite[]

    reunions Reunion[]

    notificationsSent Notification[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}

model GroupInvite {
    id String @id @default(uuid())

    comment String?
    state   GroupInviteState @default(PENDING)

    userId String
    user   User   @relation("GroupInvitesReceived", fields: [userId], references: [id], onDelete: Cascade)

    groupId String
    group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

    senderId String
    sender   User   @relation("GroupInvitesSent", fields: [senderId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum GroupInviteState {
    ACCEPTED
    REJECTED
    CANCELLED
    PENDING
}
